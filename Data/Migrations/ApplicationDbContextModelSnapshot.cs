// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sueldo_rrhh.Data;

#nullable disable

namespace sueldo_rrhh.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("sueldo_rrhh.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("sueldo_rrhh.Models.CategoriaConvenio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<char>("Agrupamiento")
                        .HasColumnType("TEXT");

                    b.Property<int>("ConvenioId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("SueldoBasico")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ConvenioId");

                    b.ToTable("CategoriaConvenio", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Agrupamiento = 'A',
                            ConvenioId = 1,
                            Nombre = "Maestranza y Servicios",
                            SueldoBasico = 441108.34000000003
                        },
                        new
                        {
                            Id = 2,
                            Agrupamiento = 'B',
                            ConvenioId = 1,
                            Nombre = "Maestranza y Servicios",
                            SueldoBasico = 442385.29999999999
                        },
                        new
                        {
                            Id = 3,
                            Agrupamiento = 'C',
                            ConvenioId = 1,
                            Nombre = "Maestranza y Servicios",
                            SueldoBasico = 446859.16999999998
                        },
                        new
                        {
                            Id = 4,
                            Agrupamiento = 'A',
                            ConvenioId = 1,
                            Nombre = "Administrativo",
                            SueldoBasico = 445901.45000000001
                        },
                        new
                        {
                            Id = 5,
                            Agrupamiento = 'B',
                            ConvenioId = 1,
                            Nombre = "Administrativo",
                            SueldoBasico = 447820.26000000001
                        },
                        new
                        {
                            Id = 6,
                            Agrupamiento = 'C',
                            ConvenioId = 1,
                            Nombre = "Administrativo",
                            SueldoBasico = 449736.83000000002
                        },
                        new
                        {
                            Id = 7,
                            Agrupamiento = 'D',
                            ConvenioId = 1,
                            Nombre = "Administrativo",
                            SueldoBasico = 455489.90999999997
                        },
                        new
                        {
                            Id = 8,
                            Agrupamiento = 'E',
                            ConvenioId = 1,
                            Nombre = "Administrativo",
                            SueldoBasico = 460283.01000000001
                        },
                        new
                        {
                            Id = 9,
                            Agrupamiento = 'F',
                            ConvenioId = 1,
                            Nombre = "Administrativo",
                            SueldoBasico = 467314.16999999998
                        },
                        new
                        {
                            Id = 10,
                            Agrupamiento = 'A',
                            ConvenioId = 1,
                            Nombre = "Cajero",
                            SueldoBasico = 447498.77000000002
                        },
                        new
                        {
                            Id = 11,
                            Agrupamiento = 'B',
                            ConvenioId = 1,
                            Nombre = "Cajero",
                            SueldoBasico = 449736.83000000002
                        },
                        new
                        {
                            Id = 12,
                            Agrupamiento = 'C',
                            ConvenioId = 1,
                            Nombre = "Cajero",
                            SueldoBasico = 452613.37
                        },
                        new
                        {
                            Id = 13,
                            Agrupamiento = 'A',
                            ConvenioId = 1,
                            Nombre = "Auxiliar",
                            SueldoBasico = 447498.77000000002
                        },
                        new
                        {
                            Id = 14,
                            Agrupamiento = 'B',
                            ConvenioId = 1,
                            Nombre = "Auxiliar",
                            SueldoBasico = 450694.54999999999
                        },
                        new
                        {
                            Id = 15,
                            Agrupamiento = 'C',
                            ConvenioId = 1,
                            Nombre = "Auxiliar",
                            SueldoBasico = 461241.85999999999
                        },
                        new
                        {
                            Id = 16,
                            Agrupamiento = 'A',
                            ConvenioId = 1,
                            Nombre = "Auxiliar Especializado",
                            SueldoBasico = 451335.28000000003
                        },
                        new
                        {
                            Id = 17,
                            Agrupamiento = 'B',
                            ConvenioId = 1,
                            Nombre = "Auxiliar Especializado",
                            SueldoBasico = 457087.22999999998
                        },
                        new
                        {
                            Id = 18,
                            Agrupamiento = 'A',
                            ConvenioId = 1,
                            Nombre = "Vendedor",
                            SueldoBasico = 447498.77000000002
                        },
                        new
                        {
                            Id = 19,
                            Agrupamiento = 'B',
                            ConvenioId = 1,
                            Nombre = "Vendedor",
                            SueldoBasico = 457088.35999999999
                        },
                        new
                        {
                            Id = 20,
                            Agrupamiento = 'C',
                            ConvenioId = 1,
                            Nombre = "Vendedor",
                            SueldoBasico = 460283.01000000001
                        },
                        new
                        {
                            Id = 21,
                            Agrupamiento = 'D',
                            ConvenioId = 1,
                            Nombre = "Vendedor",
                            SueldoBasico = 467314.16999999998
                        });
                });

            modelBuilder.Entity("sueldo_rrhh.Models.Concepto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConvenioId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Remunerativo")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Valor")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ConvenioId");

                    b.ToTable("Conceptos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConvenioId = 1,
                            Nombre = "Sueldo básico",
                            Remunerativo = true,
                            Valor = 450000.0
                        },
                        new
                        {
                            Id = 2,
                            ConvenioId = 1,
                            Nombre = "Adicional por asistencia",
                            Remunerativo = true,
                            Valor = 0.083299999999999999
                        },
                        new
                        {
                            Id = 3,
                            ConvenioId = 1,
                            Nombre = "Adicional por antiguedad",
                            Remunerativo = true,
                            Valor = 0.01
                        },
                        new
                        {
                            Id = 4,
                            ConvenioId = 1,
                            Nombre = "Descuento jubilatorio",
                            Remunerativo = true,
                            Valor = -0.11
                        },
                        new
                        {
                            Id = 5,
                            ConvenioId = 1,
                            Nombre = "Descuento obra social",
                            Remunerativo = true,
                            Valor = -0.029999999999999999
                        },
                        new
                        {
                            Id = 6,
                            ConvenioId = 1,
                            Nombre = "Descuento sindical",
                            Remunerativo = true,
                            Valor = -0.02
                        },
                        new
                        {
                            Id = 7,
                            ConvenioId = 1,
                            Nombre = "Descuento Ley 19.032 - INSSJP",
                            Remunerativo = true,
                            Valor = -0.029999999999999999
                        },
                        new
                        {
                            Id = 8,
                            ConvenioId = 1,
                            Fecha = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Incremento No Remunerativo - Acuerdo Febrero 2024",
                            Remunerativo = false,
                            Valor = 0.20000000000000001
                        },
                        new
                        {
                            Id = 9,
                            ConvenioId = 1,
                            Fecha = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Incremento No Remunerativo - Acuerdo Febrero 2024",
                            Remunerativo = false,
                            Valor = 0.17599999999999999
                        },
                        new
                        {
                            Id = 10,
                            ConvenioId = 1,
                            Fecha = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Incremento No Remunerativo - Acuerdo Febrero 2024",
                            Remunerativo = false,
                            Valor = 0.17599999999999999
                        });
                });

            modelBuilder.Entity("sueldo_rrhh.Models.Contrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AdicionalEmpresa")
                        .HasColumnType("REAL");

                    b.Property<int>("CategoriaConvenioId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<int>("HorasSemanales")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaConvenioId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.ToTable("Contrato", (string)null);
                });

            modelBuilder.Entity("sueldo_rrhh.Models.Convenio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Convenio", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Comercio (CCT 130/75)"
                        });
                });

            modelBuilder.Entity("sueldo_rrhh.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CUIT")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CUIT")
                        .IsUnique();

                    b.ToTable("Empresa", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CUIT = "12345678901",
                            Categoria = "Comercio",
                            Direccion = "Direccion 1",
                            Email = "stockcar@localhost",
                            FechaRegistro = new DateTime(2024, 3, 1, 9, 17, 24, 969, DateTimeKind.Local).AddTicks(5958),
                            Nombre = "StockCar",
                            RazonSocial = "StockCar SA",
                            Telefono = "123456789"
                        });
                });

            modelBuilder.Entity("sueldo_rrhh.Models.Feriado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EsNacional")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<string>("Motivo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Feriado", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EsNacional = true,
                            Fecha = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Motivo = "Año Nuevo"
                        },
                        new
                        {
                            Id = 2,
                            EsNacional = false,
                            Fecha = new DateTime(2021, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Motivo = "Carnaval"
                        },
                        new
                        {
                            Id = 3,
                            EsNacional = false,
                            Fecha = new DateTime(2024, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Motivo = "Carnaval"
                        },
                        new
                        {
                            Id = 4,
                            EsNacional = true,
                            Fecha = new DateTime(2024, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Motivo = "Día de la Memoria por la Verdad y la Justicia"
                        },
                        new
                        {
                            Id = 5,
                            EsNacional = false,
                            Fecha = new DateTime(2024, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Motivo = "Jueves Santo"
                        },
                        new
                        {
                            Id = 6,
                            EsNacional = false,
                            Fecha = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Motivo = "Viernes Santo"
                        },
                        new
                        {
                            Id = 7,
                            EsNacional = true,
                            Fecha = new DateTime(2024, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Motivo = "Día del Veterano y de los Caídos en la Guerra de Malvinas"
                        },
                        new
                        {
                            Id = 8,
                            EsNacional = true,
                            Fecha = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Motivo = "Día del Trabajador"
                        },
                        new
                        {
                            Id = 9,
                            EsNacional = true,
                            Fecha = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Motivo = "Día de la Revolución de Mayo"
                        });
                });

            modelBuilder.Entity("sueldo_rrhh.Models.FeriadoTrabajado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContratoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FeriadoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HorasTrabajadas")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.HasIndex("FeriadoId");

                    b.ToTable("FeriadoTrabajado", (string)null);
                });

            modelBuilder.Entity("sueldo_rrhh.Models.HoraExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContratoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<int>("Horas")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.ToTable("HoraExtra", (string)null);
                });

            modelBuilder.Entity("sueldo_rrhh.Models.Parametro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Parametro", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "horas mes",
                            Valor = "200"
                        });
                });

            modelBuilder.Entity("sueldo_rrhh.Models.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Persona", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("sueldo_rrhh.Models.PersonaHistorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CBU")
                        .HasMaxLength(22)
                        .HasColumnType("TEXT");

                    b.Property<string>("CUIL")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<string>("CVU")
                        .HasMaxLength(22)
                        .HasColumnType("TEXT");

                    b.Property<string>("Domicilio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EstadoCivil")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaEgreso")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<int>("Genero")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hijos")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("VigenteDesde")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VigenteHasta")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("PersonaHistorial", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CUIL = "20345678901",
                            Domicilio = "Direccion 2",
                            EstadoCivil = 0,
                            FechaIngreso = new DateTime(2024, 3, 1, 9, 17, 24, 969, DateTimeKind.Local).AddTicks(6092),
                            FechaNacimiento = new DateTime(2000, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = 0,
                            Hijos = 0,
                            NombreCompleto = "Admin",
                            PersonaId = 1,
                            VigenteDesde = new DateTime(2024, 3, 1, 9, 17, 24, 969, DateTimeKind.Local).AddTicks(6083)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("sueldo_rrhh.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("sueldo_rrhh.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sueldo_rrhh.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("sueldo_rrhh.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sueldo_rrhh.Models.ApplicationUser", b =>
                {
                    b.HasOne("sueldo_rrhh.Models.Persona", "Persona")
                        .WithOne("User")
                        .HasForeignKey("sueldo_rrhh.Models.ApplicationUser", "PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("sueldo_rrhh.Models.CategoriaConvenio", b =>
                {
                    b.HasOne("sueldo_rrhh.Models.Convenio", "Convenio")
                        .WithMany("Categorias")
                        .HasForeignKey("ConvenioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convenio");
                });

            modelBuilder.Entity("sueldo_rrhh.Models.Concepto", b =>
                {
                    b.HasOne("sueldo_rrhh.Models.Convenio", "Convenio")
                        .WithMany()
                        .HasForeignKey("ConvenioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convenio");
                });

            modelBuilder.Entity("sueldo_rrhh.Models.Contrato", b =>
                {
                    b.HasOne("sueldo_rrhh.Models.CategoriaConvenio", "CategoriaConvenio")
                        .WithMany("Contratos")
                        .HasForeignKey("CategoriaConvenioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sueldo_rrhh.Models.Empresa", null)
                        .WithMany("Contratos")
                        .HasForeignKey("EmpresaId");

                    b.HasOne("sueldo_rrhh.Models.Persona", "Persona")
                        .WithOne("Contrato")
                        .HasForeignKey("sueldo_rrhh.Models.Contrato", "PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaConvenio");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("sueldo_rrhh.Models.FeriadoTrabajado", b =>
                {
                    b.HasOne("sueldo_rrhh.Models.Contrato", "Contrato")
                        .WithMany("FeriadosTrabajados")
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sueldo_rrhh.Models.Feriado", "Feriado")
                        .WithMany()
                        .HasForeignKey("FeriadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrato");

                    b.Navigation("Feriado");
                });

            modelBuilder.Entity("sueldo_rrhh.Models.HoraExtra", b =>
                {
                    b.HasOne("sueldo_rrhh.Models.Contrato", "Contrato")
                        .WithMany("HorasExtras")
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrato");
                });

            modelBuilder.Entity("sueldo_rrhh.Models.PersonaHistorial", b =>
                {
                    b.HasOne("sueldo_rrhh.Models.Persona", "Persona")
                        .WithMany("PersonaHistorials")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("sueldo_rrhh.Models.CategoriaConvenio", b =>
                {
                    b.Navigation("Contratos");
                });

            modelBuilder.Entity("sueldo_rrhh.Models.Contrato", b =>
                {
                    b.Navigation("FeriadosTrabajados");

                    b.Navigation("HorasExtras");
                });

            modelBuilder.Entity("sueldo_rrhh.Models.Convenio", b =>
                {
                    b.Navigation("Categorias");
                });

            modelBuilder.Entity("sueldo_rrhh.Models.Empresa", b =>
                {
                    b.Navigation("Contratos");
                });

            modelBuilder.Entity("sueldo_rrhh.Models.Persona", b =>
                {
                    b.Navigation("Contrato");

                    b.Navigation("PersonaHistorials");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
